// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SignedTimestamp.proto

package yotiprotocom

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SignedTimestamp is a timestamp associated with a message that has a
// cryptographic signature proving that it was issued by the correct authority.
type SignedTimestamp struct {
	// Version indicates how the digests within this object are calculated.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Timestamp is the time this SignedTimestamp was issued. It is in UTC,
	// as µseconds elapsed since the epoch (µs from 1970-01-01T00:00:00Z).
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// MessageDigest is the digest of the message this timestamp is
	// associated with. The first step in verifying the timestamp is
	// ensuring the MessageDigest matches the original message data.
	//
	// For version 1 objects, the message digest algorithm is SHA-512/224.
	MessageDigest []byte `protobuf:"bytes,3,opt,name=message_digest,json=messageDigest,proto3" json:"message_digest,omitempty"`
	// ChainDigest is the digest of the previous SignedTimestamp message
	// in the chain. The second step in verifying the timestamp is walking
	// back over the chain and checking each SignedTimestamp's ChainDigest
	// field. The SignedTimestamp at the beginning of the chain has this
	// field set to a specific, publish value.
	//
	// For version 1 objects, the chain digest algorithm is HMAC-SHA-512/224,
	// with the secret being equal to the MessageDigest field.
	ChainDigest []byte `protobuf:"bytes,4,opt,name=chain_digest,json=chainDigest,proto3" json:"chain_digest,omitempty"`
	// ChainDigestSkip1 is only populated once every 500 nodes. It is the
	// ChainDigest value of the timestamp 500 nodes previously.
	ChainDigestSkip1 []byte `protobuf:"bytes,5,opt,name=chain_digest_skip1,json=chainDigestSkip1,proto3" json:"chain_digest_skip1,omitempty"`
	// ChainDigestSkip2 is only populated once every 250000 nodes (or once
	// every 500 nodes that have ChainDigestSkip1 populated). It is the
	// ChainDigest value of the timestamp 250000 nodes previously.
	ChainDigestSkip2     []byte   `protobuf:"bytes,6,opt,name=chain_digest_skip2,json=chainDigestSkip2,proto3" json:"chain_digest_skip2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedTimestamp) Reset()         { *m = SignedTimestamp{} }
func (m *SignedTimestamp) String() string { return proto.CompactTextString(m) }
func (*SignedTimestamp) ProtoMessage()    {}
func (*SignedTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5602a15d48f50e63, []int{0}
}

func (m *SignedTimestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedTimestamp.Unmarshal(m, b)
}
func (m *SignedTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedTimestamp.Marshal(b, m, deterministic)
}
func (m *SignedTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTimestamp.Merge(m, src)
}
func (m *SignedTimestamp) XXX_Size() int {
	return xxx_messageInfo_SignedTimestamp.Size(m)
}
func (m *SignedTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTimestamp proto.InternalMessageInfo

func (m *SignedTimestamp) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SignedTimestamp) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SignedTimestamp) GetMessageDigest() []byte {
	if m != nil {
		return m.MessageDigest
	}
	return nil
}

func (m *SignedTimestamp) GetChainDigest() []byte {
	if m != nil {
		return m.ChainDigest
	}
	return nil
}

func (m *SignedTimestamp) GetChainDigestSkip1() []byte {
	if m != nil {
		return m.ChainDigestSkip1
	}
	return nil
}

func (m *SignedTimestamp) GetChainDigestSkip2() []byte {
	if m != nil {
		return m.ChainDigestSkip2
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedTimestamp)(nil), "compubapi_v1.SignedTimestamp")
}

func init() { proto.RegisterFile("SignedTimestamp.proto", fileDescriptor_5602a15d48f50e63) }

var fileDescriptor_5602a15d48f50e63 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0d, 0xce, 0x4c, 0xcf,
	0x4b, 0x4d, 0x09, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x49, 0xce, 0xcf, 0x2d, 0x28, 0x4d, 0x4a, 0x2c, 0xc8, 0x8c, 0x2f, 0x33, 0x54,
	0x7a, 0xcf, 0xc8, 0xc5, 0x8f, 0xa6, 0x4e, 0x48, 0x82, 0x8b, 0xbd, 0x2c, 0xb5, 0xa8, 0x38, 0x33,
	0x3f, 0x4f, 0x82, 0x51, 0x81, 0x51, 0x83, 0x35, 0x08, 0xc6, 0x15, 0x92, 0xe1, 0xe2, 0x2c, 0x81,
	0x29, 0x93, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x42, 0x08, 0x08, 0xa9, 0x72, 0xf1, 0xe5, 0xa6,
	0x16, 0x17, 0x27, 0xa6, 0xa7, 0xc6, 0xa7, 0x64, 0xa6, 0xa7, 0x16, 0x97, 0x48, 0x30, 0x2b, 0x30,
	0x6a, 0xf0, 0x04, 0xf1, 0x42, 0x45, 0x5d, 0xc0, 0x82, 0x42, 0x8a, 0x5c, 0x3c, 0xc9, 0x19, 0x89,
	0x99, 0x79, 0x30, 0x45, 0x2c, 0x60, 0x45, 0xdc, 0x60, 0x31, 0xa8, 0x12, 0x1d, 0x2e, 0x21, 0x64,
	0x25, 0xf1, 0xc5, 0xd9, 0x99, 0x05, 0x86, 0x12, 0xac, 0x60, 0x85, 0x02, 0x48, 0x0a, 0x83, 0x41,
	0xe2, 0x58, 0x55, 0x1b, 0x49, 0xb0, 0x61, 0x55, 0x6d, 0xe4, 0x64, 0xcd, 0x25, 0x9a, 0x9c, 0x9f,
	0xab, 0x57, 0x99, 0x5f, 0x92, 0xa9, 0x87, 0x14, 0x14, 0xc6, 0x4e, 0x22, 0x68, 0xe1, 0x10, 0x00,
	0x0a, 0xae, 0x28, 0x1e, 0x90, 0x42, 0x70, 0xc8, 0x25, 0xe7, 0xe7, 0x26, 0xb1, 0x81, 0x59, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x27, 0xbf, 0x01, 0x5c, 0x01, 0x00, 0x00,
}
